Ref:
Beginner’s Guide
http://nginx.org/en/docs/beginners_guide.html

== install ==
Ref: http://nginx.org/en/linux_packages.html

Currently, nginx packages are available for the following Ubuntu versions and platforms:
Version Codename    Supported Platforms
12.04   precise     x86_64, i386
14.04   trusty      x86_64, i386, aarch64/arm64
15.10   wily        x86_64, i386
16.04   xenial      x86_64, i386
    |  $ uname -a
       Linux xili-dev2 3.16.0-51-generic #69~14.04.1-Ubuntu SMP Wed Oct 7 15:32:41 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux

    |  $ lsb_release -a
       No LSB modules are available.
       Distributor ID: Ubuntu
       Description:    Ubuntu 15.10
       Release:        15.10
       Codename:       wily


To authenticate the nginx repository signature and to eliminate warnings about missing PGP key during installation of the nginx package:
    |  wget http://nginx.org/keys/nginx_signing.key
    |  sudo apt-key add nginx_signing.key

For Ubuntu replace codename with Ubuntu distribution codename, and append the following to the end of the /etc/apt/sources.list file:
    |  $ echo << "EOF" > /etc/apt/sources.list 
       deb http://nginx.org/packages/ubuntu/ <codename> nginx
       deb-src http://nginx.org/packages/ubuntu/ <codename> nginx
       EOF

For Debian/Ubuntu then run the following commands:
    |  apt-get update
    |  apt-get install nginx

== start ==
In case "[emerg]: bind() to 0.0.0.0:80 failed (98: Address already in use)":
$ sudo service apache2 stop
* Stopping web server apache2
*
$ sudo service nginx start

== nginx.conf file ==
By default, the configuration file is named nginx.conf and placed in the directory:
    /usr/local/nginx/conf
    /etc/nginx <== here
    /usr/local/etc/nginx


== control ==
$ nginx -s <signal>
Where <signal> may be one of the following:
    stop — fast shutdown
    quit — graceful shutdown
    reload — reloading the configuration file
    reopen — reopening the log files


== ps ==
$ ps -aux | grep nginx
root     12467  0.0  0.0  31480   804 ?        Ss   11:05   0:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx    12468  0.0  0.0  31860  2964 ?        S    11:05   0:00 nginx: worker process


[unibvt]
== install php & php-fpm ==
$ sudo apt-get install php7.0-fpm

$ sudo vim /etc/php/7.0/fpm/pool.d/www.conf
>>>
s/listen = /run/php/php7.0-fpm.sock/listen = 127.0.0.1:9000/

$ sudo service php7.0-fpm restart

monitor if there failure
$ sudo tailf /var/log/php7.0-fpm.log

make sure it's up and running
$ netstat -an | grep :9000
tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN
$ ps aux | grep php-fpm
root      1303  0.1  0.6 239568 25872 ?        Ss   19:51   0:00 php-fpm: master process (/etc/php/7.0/fpm/php-fpm.conf)
www-data  1305  0.0  0.1 239568  7368 ?        S    19:51   0:00 php-fpm: pool www
www-data  1306  0.0  0.1 239568  7368 ?        S    19:51   0:00 php-fpm: pool www

$ php --ini
Configuration File (php.ini) Path: /etc/php/7.0/cli
Loaded Configuration File:         /etc/php/7.0/cli/php.ini
Scan for additional .ini files in: /etc/php/7.0/cli/conf.d
...

$ sudo vim /etc/php/7.0/cli/php.ini
>>>
s/short_open_tag = Off/short_open_tag = On/
$ sudo vim /etc/php/7.0/fpm/php.ini
>>>
s/short_open_tag = Off/short_open_tag = On/

$ sudo service php7.0-fpm restart


== install postgresql ==
Install php lib for postgresql
$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:ondrej/php
$ sudo apt-get update
$ sudo apt-get install -y php7.0-pgsql

$ sudo apt-get install postgresql

check if postgresql is up and running
$ ps aux | grep postgresql
postgres 22330  0.0  0.5 251972 21060 ?        S    18:55   0:00 /usr/lib/postgresql/9.3/bin/postgres -D /var/lib/postgresql/9.3/main -c config_file=/etc/postgresql/9.3/main/postgresql.conf

change all METHODs to trust
$ sudo vim /etc/postgresql/9.3/main/pg_hba.conf
>>>
# Database administrative login by Unix domain socket
local   all             postgres                                trust

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
host    all             all             0.0.0.0/0               trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
host    all             all             192.168.0.0/16          trust
host    all             all             172.18.0.0/16           trust

$ sudo service postgresql restart


== clone postgresql ==
Ref:
How To Backup and Restore PostgreSQL Database Using pg_dump and psql
http://www.thegeekstuff.com/2009/01/how-to-backup-and-restore-postgres-database-using-pg_dump-and-psql/
PostgreSQL 9.2.17 Documentation -- pg_dump
https://www.postgresql.org/docs/9.2/static/app-pgdump.html
[Chinese] PostGresql 备份和恢复
http://zwb8686.blog.51cto.com/982393/1140172

[production] $ psql -U postgres
psql (9.2.4)
Type "help" for help.
postgres=# select pg_size_pretty(pg_database_size('unified'));
 pg_size_pretty
----------------
 267 MB
(1 row)

postgres=# \q

[production] $ pg_dump -U postgres unified | gzip > unified.db.sql.gz

[production] $ ll -h unified.db.sql.gz
-rw-rw-r-- 1 gavrilov gavrilov 12M Jun 30 17:05 unified.db.sql.gz

(optional) [dev] $ /etc/init.d/postgresql restart
(optional) [dev] $ psql -U postgres
postgres=# drop database unified;
postgres=# create database unified;

[dev] $ gunzip -c unified.db.sql.gz | psql -U postgres unified



== remote postgresql access ==
Ref:
How to Allow Remote Connection to PostgreSQL Database using psql
http://www.thegeekstuff.com/2014/02/enable-remote-postgresql-connection/

Step 1: Modify pg_hba.conf to add Client Authentication Record
    $ sudo vim /etc/postgresql/9.3/main/pg_hba.conf
    append:
    host    all             all             192.168.87.0/24         trust
Step 2: Change the Listen Address in postgresql.conf
    $ sudo vim /etc/postgresql/9.3/main/postgresql.conf
    s/listen_addresses = 'localhost'/listen_addresses = '*'/
Step 3: Restart DB
    $ sudo service postgresql restart 

Validation: 
   1) CMDLine
   $ psql -U postgres -h 192.168.102.1
   2) GUI (MacOS)
   https://eggerapps.at/postico/


