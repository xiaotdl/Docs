Ref:
GDB cheatsheet: https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

e.g.
$ g++ -std=c++11 -g -O0 -o /tmp main.cpp
-g flag tells gcc to add debugging information into the binary.
-O0 flag sets the optimization level to 0 (disabled). This will prevent inlining, which would make debugging more difficult.

$ gdb ./a.out

e.g.
$ buck build @mode/opt admarket/adindexer/test:index_query_test --show-output
>>> //admarket/adindexer/test:index_query_test buck-out/gen/admarket/adindexer/test/index_query_test

$ gdb buck-out/gen/admarket/adindexer/test/index_query_test


== Tricks ==
Ref: https://www.youtube.com/watch?v=PorfLSr3DDI

ctrl+x a - enter into text user interface(TUI), a nicer GUI
ctrl+x 2 - show assembly codes, then register
ctrl+x 1 - go back
uparrow/downarrow - going up/down
ctrl+p/n - go to previous/next command, works in CLI 


== Useful debug commands ==
h(elp) - list of classes of commands 
  e.g. help bt

q(uit) - exit gdb

start - execute the program and stop at main
r(un) - execute the program
  e.g. r --gtest_filter=UsersRichQueryRewritingTest.PhoneticAndSegments2
b(reak) <line-number> - set a breakpoint
  e.g. add breakpoint to file using relpath or abspath, (gdb)$ b fib.cpp:34
  e.g. add breakpoint to function, b fibbonacci::operator()


n(ext) <repitition> - step over, execute next statement
s(tep) <repitition> - step into, execute into statement
fin(ish) - step out, run until exit from a function
c(ontinue) - continue execution
u(ntil) <location> - continue running your program until either the specified location is reached, or the current stack frame returns.

[multi-thread]
set scheduler-locking <mode> - If on, then only the current thread may run when the inferior is resumed. 
REF: https://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_39.html

l(ist) - display lines around the last line
set listsize <count> - change how many lines will be printed
l(ist) <start-line>
l(ist) <start-line>,<end-line>
l(ist) - - Print lines just before the lines last printed.


p(rint) <var | expr> - inspect the value of a variable or expression
disp(lay) <var> - print the value of a variable at every step
wha(tis) <var | expr> - inspect the type of a variable or expression


set var <var> = <expr> - set the value of a variable


bt, backtrack <n innermost frames> - dump the backtrace of the stack frames
  To print a backtrace including local variables, use `backtrace full`
(gdb) help bt
Print backtrace of all stack frames, or innermost COUNT frames.
Usage: backtrace [QUALIFIERS]... [COUNT]
With a negative argument, print outermost -COUNT frames.
Use of the 'full' qualifier also prints the values of the local variables.
Use of the 'no-filters' qualifier prohibits frame filters from executing
on this backtrace.


f(rame) - dump (current) stack frame
i(nfo) f(rame) <framespec> - dump verbose (current) stack fram
i(nfo) ar(gs) - dump the arguments of current frame
i(nfo) lo(cals) - dump the local variables of current frame


# manageing breakpoints
i(nfo) b(reakpoints) - list existing breakpoints
dis(able) breakpoints <i> - disable a breakpoint
en(able) breakpoints <i> - enable a breakpoint
d(elete) breakpoints <i> - delete a breakpoint, e.g. `d` deletes all breakpoints


# managing auto-displays
i(nfo) di(splay) - list existing displays
dis(able) display <i> - disable a display
en(able) display <i> - enable a display
d(elete) display <i> - delete a display


at(tach) <pid> - attach to a running process
k(ill) process - stop debugging and kill the debuggee process


$ gdb --args /tmp/bin arg1 arg2
or
(gdb)$ run arg1 arg2


--------------------------------------------------------------------------------
Ref:
CppCon 2015: Greg Law " Give me 15 minutes & I'll change your view of GDB"
https://www.youtube.com/watch?v=PorfLSr3DDI

Ctrl-x a - enter/exit interactive mode


--------------------------------------------------------------------------------
Ref: https://our.internmc.facebook.com/intern/wiki/Dex/gdb/
# catch throws
# debugging multiple threads..
# debugging deadlocks


--------------------------------------------------------------------------------
Ref: http://www.yolinux.com/TUTORIALS/GDB-Commands.html
Prerequisite: Download .gdbinit to use the following macros:
Data type	GDB command
std::vector<T>	pvector stl_variable
std::list<T>	plist stl_variable T
std::map<T,T>	pmap stl_variable
std::multimap<T,T>	pmap stl_variable
std::set<T>	pset stl_variable T
std::multiset<T>	pset stl_variable
std::deque<T>	pdequeue stl_variable
std::stack<T>	pstack stl_variable
std::queue<T>	pqueue stl_variable
std::priority_queue<T>	ppqueue stl_variable
std::bitset<n>td>	pbitset stl_variable
std::string	pstring stl_variable
std::widestring	pwstring stl_variable

e.g.
$ g++ -std=c++11 -g -O0 -Wall main.cpp
$ cgdb ./a.out
(gdb) b main
(gdb) run
(gdb) u 20
(gdb) pvector v
elem[0]: $2 = 1
elem[1]: $3 = 2
elem[2]: $4 = 3
Vector size = 3
Vector capacity = 4
Element type = std::_Vector_base<int, std::allocator<int> >::pointer


--
== print elements inside vector ==
REF: https://math-linux.com/c/faq-c/faq-c-stl/article/how-to-print-the-elements-of-a-c-std-vector-with-gnu-debugger-gdb

(gdb) p v
$9 = {
  <std::_Vector_base<int, std::allocator<int> >> = {
    _M_impl = {
      <std::allocator<int>> = {
        <__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>},
      members of std::_Vector_base<int, std::allocator<int> >::_Vector_impl:
      _M_start = 0x604030,
      _M_finish = 0x604038,
      _M_end_of_storage = 0x604038
    }
  }, <No data fields>}
(gdb) p *(v._M_impl._M_start)
$10 = 1
(gdb) p *(v._M_impl._M_start+1)
$11 = 2


--CGDB--
https://cgdb.github.io/docs/cgdb.html#Switching-Windows
* switch between windows
ESC - switch into CGDB, navigation using vi keys
i   - switch back to GDB
