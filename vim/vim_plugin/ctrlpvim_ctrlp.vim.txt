vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
===============================================================================

ctrlp.vim

Active fork of kien/ctrlp.vimâ€”Fuzzy file, buffer, mru, tag, etc finder.
http://ctrlpvim.github.com/ctrlp.vim

===============================================================================

Full path fuzzy file, buffer, mru, tag, ... finder for Vim.

* Written in pure Vimscript for MacVim, gVim and Vim 7.0+.
* Full support for Vim's regexp as search patterns.
* Built-in Most Recently Used (MRU) files monitoring.
* Built-in project's root finder.
* Open multiple files at once.
* Create new files and directories.
* Extensible.


## Basic Usage
* Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
* Run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in find buffer or find MRU file
  mode.
* Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
Check :help ctrlp-commands and :help ctrlp-extensions for other commands.

### Once CtrlP is open:
* Use <c-j>, <c-k> or the arrow keys to navigate the result list.
* Press <c-f> and <c-b> to cycle between modes.
* Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
* Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new
  split.

* Press <F5> to purge the cache for the current directory to get new files,
  remove deleted files and apply new ignore options.
* Press <c-d> to switch to filename only search instead of full path.
* Press <c-r> to switch to regexp mode.
* Use <c-y> to create a new file and its parent directories.
* Use <c-z> to mark/unmark multiple files and <c-o> to open them.

## Basic Options
* Change the default mapping and the default command to invoke CtrlP:
```
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
```

* When invoked without an explicit starting directory, CtrlP will set its local
working directory according to this variable:

```
let g:ctrlp_working_path_mode = 'ra'
```
  'c' - the directory of the current file.
  'a' - the directory of the current file, unless it is a subdirectory of the
  cwd
  'r' - the nearest ancestor of the current file that contains one of these
  directories or files: .git .hg .svn .bzr _darcs
  'w' - modifier to "r": start search from the cwd instead of the current file's
  directory
  0 or '' (empty string) - disable this feature.

If none of the default markers (.git .hg .svn .bzr _darcs) are present in a
project, you can define additional ones with g:ctrlp_root_markers:

```
let g:ctrlp_root_markers = ['pom.xml', '.p4ignore']
```

* If a file is already open, open it again in a new pane instead of switching to
the existing pane
```
let g:ctrlp_switch_buffer = 'et'
```

* Exclude files and directories using Vim's wildignore and CtrlP's own
g:ctrlp_custom_ignore. If a custom listing command is being used, exclusions
are ignored:

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

*ctrlp.txt*       Fuzzy file, buffer, mru, tag, ... finder. v1.80
*CtrlP* *ControlP* *'ctrlp'* *'ctrl-p'*
===============================================================================
#                                                                             #
#          :::::::: ::::::::::: :::::::::  :::             :::::::::          #
#         :+:    :+:    :+:     :+:    :+: :+:             :+:    :+:         #
#         +:+           +:+     +:+    +:+ +:+             +:+    +:+         #
#         +#+           +#+     +#++:++#:  +#+             +#++:++#+          #
#         +#+           +#+     +#+    +#+ +#+             +#+                #
#         #+#    #+#    #+#     #+#    #+# #+#             #+#                #
#          ########     ###     ###    ### ##########      ###                #
#                                                                             #
===============================================================================
:help ctrlp

CONTENTS                                                       *ctrlp-contents*

    1. Intro........................................|ctrlp-intro|
    2. Options......................................|ctrlp-options|
    3. Commands.....................................|ctrlp-commands|
    4. Mappings.....................................|ctrlp-mappings|
    5. Input Formats................................|ctrlp-input-formats|
    6. Extensions...................................|ctrlp-extensions|

===============================================================================
INTRO                                                             *ctrlp-intro*

Full path fuzzy file, buffer, mru, tag, ... finder with an intuitive interface.
Written in pure Vimscript for MacVim, gVim and Vim version 7.0+. Has full
support for Vim's |regexp| as search pattern, built-in MRU files monitoring,
project's root finder, and more.

To enable optional extensions (tag, dir, rtscript...), see |ctrlp-extensions|.

===============================================================================
OPTIONS                                                         *ctrlp-options*

Overview:~

  |loaded_ctrlp|................Disable the plugin.
  |ctrlp_map|...................Default mapping.
  |ctrlp_cmd|...................Default command used for the default mapping.
  |ctrlp_by_filename|...........Default to filename mode or not.
  |ctrlp_regexp|................Default to regexp mode or not.
  |ctrlp_match_window|..........Order, height and position of the match window.
  |ctrlp_switch_buffer|.........Jump to an open buffer if already opened.
  |ctrlp_reuse_window|..........Reuse special windows (help, quickfix, etc).
  |ctrlp_tabpage_position|......Where to put the new tab page.
  |ctrlp_working_path_mode|.....How to set CtrlP's local working directory.
  |ctrlp_root_markers|..........Additional, high priority root markers.
  |ctrlp_use_caching|...........Use per-session caching or not.
  |ctrlp_clear_cache_on_exit|...Keep cache after exiting Vim or not.
  |ctrlp_cache_dir|.............Location of the cache directory.
  |ctrlp_show_hidden|...........Ignore dotfiles and dotdirs or not.
  |ctrlp_custom_ignore|.........Hide stuff when using |globpath()|.
  |ctrlp_max_files|.............Number of files to scan initially.
  |ctrlp_max_depth|.............Directory depth to recurse into when scanning.
  |ctrlp_user_command|..........Use an external scanner.
  |ctrlp_max_history|...........Number of entries saved in the prompt history.
  |ctrlp_open_new_file|.........How to open a file created by <c-y>.
  |ctrlp_open_multiple_files|...How to open files selected by <c-z>.
  |ctrlp_arg_map|...............Intercept <c-y> and <c-o> or not.
  |ctrlp_follow_symlinks|.......Follow symbolic links or not.
  |ctrlp_lazy_update|...........Only update when typing has stopped.
  |ctrlp_default_input|.........Seed the prompt with an initial string.
  |ctrlp_abbrev|................Input abbreviations.
  |ctrlp_key_loop|..............Use input looping for multi-byte input.
  |ctrlp_prompt_mappings|.......Change the mappings inside the prompt.
  |ctrlp_line_prefix|...........Prefix for each line in ctrlp window.
  |ctrlp_open_single_match|.....Automatically accept when only one candidate.
  |ctrlp_brief_prompt|..........Exit CtrlP on empty prompt by <bs>.
  |ctrlp_match_current_file|....Include current file in match entries.
  |ctrlp_types|.................Names of builtin types.

  MRU mode:
  |ctrlp_mruf_max|..............Max MRU entries to remember.
  |ctrlp_mruf_exclude|..........Files that shouldn't be remembered.
  |ctrlp_mruf_include|..........Files to be remembered.
  |ctrlp_mruf_relative|.........Show only MRU files in the working directory.
  |ctrlp_tilde_homedir|....Save MRU file paths in home dir as ~/.
  |ctrlp_mruf_default_order|....Disable sorting.
  |ctrlp_mruf_case_sensitive|...MRU files are case sensitive or not.
  |ctrlp_mruf_save_on_update|...Save to disk whenever a new entry is added.

  Buffer mode:
  |ctrlp_bufname_mod|...........File name section modificator.
  |ctrlp_bufpath_mod|...........File path section modificator.

  BufferTag mode: (to enable, see |ctrlp-extensions|)
  |g:ctrlp_buftag_ctags_bin|....The location of the ctags-compatible binary.
  |g:ctrlp_buftag_systemenc|....The encoding used for the ctags command.
  |g:ctrlp_buftag_types|........Add new filetypes and set the cmd arguments.

  Advanced options:
  |ctrlp_open_func|.............Use custom file opening functions.
  |ctrlp_status_func|...........Change CtrlP's two statuslines.
  |ctrlp_buffer_func|...........Call custom functions in the CtrlP buffer.
  |ctrlp_match_func|............Replace the built-in matching algorithm.

-------------------------------------------------------------------------------
Detailed descriptions and default values:~

                                                                *'g:ctrlp_map'*
Use this option to change the mapping to invoke CtrlP in |Normal| mode: >
  let g:ctrlp_map = '<c-p>'


                                                                *'g:ctrlp_cmd'*
Set the default opening command to use when pressing the above mapping: >
  let g:ctrlp_cmd = 'CtrlP'
<

                                                             *'g:loaded_ctrlp'*
Use this to disable the plugin completely: >
  let g:loaded_ctrlp = 1
<

                                                        *'g:ctrlp_by_filename'*
Set this to 1 to set searching by filename (as opposed to full path) as the
default: >
  let g:ctrlp_by_filename = 0
<
Can be toggled on/off by pressing <c-d> inside the prompt.

                                                             *'g:ctrlp_regexp'*
Set this to 1 to set regexp search as the default: >
  let g:ctrlp_regexp = 0

Can be toggled on/off by pressing <c-r> inside the prompt.


                                                       *'g:ctrlp_match_window'*
Change the position, the listing order of results, the minimum and the maximum
heights of the match window: >
  let g:ctrlp_match_window = ''
<
Example: >
  let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
<
The position: (default: bottom)
  top - show the match window at the top of the screen.
  bottom - show the match window at the bottom of the screen.

The listing order of results: (default: btt)
  order:ttb - from top to bottom.
  order:btt - from bottom to top.

The minimum and maximum heights:
  min:{n} - show minimum {n} lines (default: 1).
  max:{n} - show maximum {n} lines (default: 10).

The maximum number of results:
  results:{n} - list maximum {n} results (default: sync with max height).
                0 mean no-limit.

Note: When a setting isn't set, its default value will be used.

                                                   *'g:ctrlp_tabpage_position'*
Where to put the new tab page when opening one: >
  let g:ctrlp_tabpage_position = 'ac'
<
  a - after.
  b - before.
  c - the current tab page.
  l - the last tab page.
  f - the first tab page.

                                                  *'g:ctrlp_working_path_mode'*
When starting up, CtrlP sets its local working directory according to this
variable: >
  let g:ctrlp_working_path_mode = 'ra'
<
  c - the directory of the current file.
  a - the directory of the current file, unless it is a subdirectory of the cwd
  r - the nearest ancestor of the current file that contains one of these
      directories or files:
      .git .hg .svn .bzr _darcs
  w - modifier to "r": start search from the cwd instead of the current file's
      directory
  0 or <empty> - disable this feature.

Note #1: if "a" or "c" is included with "r", use the behavior of "a" or "c" (as
a fallback) when a root can't be found.

Note #2: you can use a |b:var| to set this option on a per buffer basis.

                                                       *'g:ctrlp_root_markers'*
Use this to set your own root markers in addition to the default ones (.git,
.hg, .svn, .bzr, and _darcs). Your markers will take precedence: >
  let g:ctrlp_root_markers = ['']

                                                        *'g:ctrlp_use_caching'*
Enable/Disable per-session caching: >
  let g:ctrlp_use_caching = 1
<
  0 - Disable caching.
  1 - Enable caching.
  n - When bigger than 1, disable caching and use the number as the limit to
      enable caching again.

Note: you can quickly purge the cache by pressing <F5> while inside CtrlP.

                                                *'g:ctrlp_clear_cache_on_exit'*
Set this to 0 to enable cross-session caching by not deleting the cache files
upon exiting Vim: >
  let g:ctrlp_clear_cache_on_exit = 1

                                                          *'g:ctrlp_cache_dir'*
Set the directory to store the cache files: >
  let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

                                                        *'g:ctrlp_show_hidden'*
Set this to 1 if you want CtrlP to scan for dotfiles and dotdirs: >
  let g:ctrlp_show_hidden = 0
<
Note: does not apply when a command defined with |g:ctrlp_user_command| is
being used.

                                                           *'ctrlp-wildignore'*
You can use Vim's |'wildignore'| to exclude files and directories from the
results.
Examples: >
  " Excluding version control directories
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Linux/MacOSX
  set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*  " Windows ('noshellslash')
<
Note #1: the `*/` in front of each directory glob is required.

Note #2: |wildignore| influences the result of |expand()|, |globpath()| and
|glob()| which many plugins use to find stuff on the system (e.g. VCS related
plugins look for .git/, .hg/,... some other plugins look for external *.exe
tools on Windows). So be a little mindful of what you put in your |wildignore|.

                                                      *'g:ctrlp_custom_ignore'*
In addition to |'wildignore'| and |g:ctrlp_show_hidden|, use this for files
and directories you want only CtrlP to not show. Use regexp to specify the
patterns: >
  let g:ctrlp_custom_ignore = ''
<
Examples: >
  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
  let g:ctrlp_custom_ignore = {
    \ 'file': '\v(\.cpp|\.h|\.hh|\.cxx)@<!$'
    \ }
  let g:ctrlp_custom_ignore = {
    \ 'func': 'some#custom#match_function'
    \ }
<
Note #1: by default, |wildignore| and |g:ctrlp_custom_ignore| only apply when
|globpath()| is used to scan for files, thus these options do not apply when a
command defined with |g:ctrlp_user_command| is being used.

Note #2: when changing the option's variable type, remember to |:unlet| it
first or restart Vim to avoid the "E706: Variable type mismatch" error.

Note #3: when using the "func" ignore type, you must provide the full name of
a function that can be called from CtrlP. An |autoload| function name is
recommended here. The function must take 2 parameters, the item to match and
its type. The type will be "dir", "file", or "link". The function must return
1 if the item should be ignored, 0 otherwise.

                                                          *'g:ctrlp_max_files'*
The maximum number of files to scan, set to 0 for no limit: >
  let g:ctrlp_max_files = 10000
<
Note: does not apply when a command defined with |g:ctrlp_user_command| is
being used.

                                                          *'g:ctrlp_max_depth'*
The maximum depth of a directory tree to recurse into: >
  let g:ctrlp_max_depth = 40
<
Note: does not apply when a command defined with |g:ctrlp_user_command| is
being used.

                                                        *'g:ctrlp_max_history'*
The maximum number of input strings you want CtrlP to remember. The default
value mirrors Vim's global |'history'| option: >
  let g:ctrlp_max_history = &history
<
Set to 0 to disable prompt's history. Browse the history with <c-n> and <c-p>.

                                                      *'g:ctrlp_open_new_file'*
Use this option to specify how the newly created file is to be opened when
pressing <c-y>: >
  let g:ctrlp_open_new_file = 'v'
<
  t - in a new tab.
  h - in a new horizontal split.
  v - in a new vertical split.
  r - in the current window.

                                                    *'g:ctrlp_follow_symlinks'*
If non-zero, CtrlP will follow symbolic links when listing files: >
  let g:ctrlp_follow_symlinks = 0
<
  0 - don't follow symbolic links.
  1 - follow but ignore looped internal symlinks to avoid duplicates.
  2 - follow all symlinks indiscriminately.

Note: does not apply when a command defined with |g:ctrlp_user_command| is
being used.

                                                        *'g:ctrlp_lazy_update'*
Set this to 1 to enable the lazy-update feature: only update the match window
after typing's been stopped for a certain amount of time: >
  let g:ctrlp_lazy_update = 0
<
If is 1, update after 250ms. If bigger than 1, the number will be used as the
delay time in milliseconds.

                                                      *'g:ctrlp_default_input'*
Set this to 1 to enable seeding the prompt with the current file's relative
path: >
  let g:ctrlp_default_input = 0
<
Instead of 1 or 0, if the value of the option is a string, it'll be used as-is
as the default input: >
  let g:ctrlp_default_input = 'anystring'
<
This option works well together with |g:ctrlp_open_single_match|

                                                 *'g:ctrlp_match_current_file'*
Includes the current file in the match entries: >
  let g:ctrlp_match_current_file = 1

By default, the current file is excluded from the list.

Note: does not apply when |g:ctrlp_match_func| is used. 

                                                              *'g:ctrlp_types'*
Set this to list of names to customize core types: >
  let g:ctrlp_types = ['mru', 'fil']

By default, the types are: >
  let g:ctrlp_types = ['fil', 'buf', 'mru'].

                                                             *'g:ctrlp_abbrev'*
Define input abbreviations that can be expanded (either internally or visibly)
in the prompt: >
  let g:ctrlp_abbrev = {}

                                                           *'g:ctrlp_key_loop'*
An experimental feature. Set this to 1 to enable input looping for the typing
of multi-byte characters: >
  let g:ctrlp_key_loop = 0
<
Note #1: when set, this option resets the |g:ctrlp_lazy_update| option.

Note #2: you can toggle this feature inside the prompt with a custom mapping: >
  let g:ctrlp_prompt_mappings = { 'ToggleKeyLoop()': ['<F3>'] }

                                                    *'g:ctrlp_prompt_mappings'*
Use this to customize the mappings inside CtrlP's prompt to your liking. You
only need to keep the lines that you've changed the values (inside []): >
  let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()':              ['<bs>', '<c-]>'],
    \ 'PrtDelete()':          ['<del>'],
    \ 'PrtDeleteWord()':      ['<c-w>'],
    \ 'PrtClear()':           ['<c-u>'],
    \ 'PrtSelectMove("j")':   ['<c-j>', '<down>'],
    \ 'PrtSelectMove("k")':   ['<c-k>', '<up>'],
    \ 'PrtSelectMove("t")':   ['<Home>', '<kHome>'],
    \ 'PrtSelectMove("b")':   ['<End>', '<kEnd>'],
    \ 'PrtSelectMove("u")':   ['<PageUp>', '<kPageUp>'],
    \ 'PrtSelectMove("d")':   ['<PageDown>', '<kPageDown>'],
    \ 'PrtHistory(-1)':       ['<c-n>'],
    \ 'PrtHistory(1)':        ['<c-p>'],
    \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
    \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>'],
    \ 'AcceptSelection("t")': ['<c-t>'],
    \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
    \ 'ToggleFocus()':        ['<s-tab>'],
    \ 'ToggleRegex()':        ['<c-r>'],
    \ 'ToggleByFname()':      ['<c-d>'],
    \ 'ToggleType(1)':        ['<c-f>', '<c-up>'],
    \ 'ToggleType(-1)':       ['<c-b>', '<c-down>'],
    \ 'PrtExpandDir()':       ['<tab>'],
    \ 'PrtInsert("c")':       ['<MiddleMouse>', '<insert>'],
    \ 'PrtInsert()':          ['<c-\>'],
    \ 'PrtCurStart()':        ['<c-a>'],
    \ 'PrtCurEnd()':          ['<c-e>'],
    \ 'PrtCurLeft()':         ['<c-h>', '<left>', '<c-^>'],
    \ 'PrtCurRight()':        ['<c-l>', '<right>'],
    \ 'PrtClearCache()':      ['<F5>'],
    \ 'PrtDeleteEnt()':       ['<F7>'],
    \ 'CreateNewFile()':      ['<c-y>'],
    \ 'MarkToOpen()':         ['<c-z>'],
    \ 'OpenMulti()':          ['<c-o>'],
    \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>'],
    \ }
<
Note: if pressing <bs> moves the cursor one character to the left instead of
deleting a character for you, add this to your |.vimrc| to disable the plugin's
default <c-h> mapping: >
  let g:ctrlp_prompt_mappings = { 'PrtCurLeft()': ['<left>', '<c-^>'] }

                                                    *'g:ctrlp_line_prefix'*
This prefix will be prepended to each line in ctrlp's item listing.
default: >
  let g:ctrlp_line_prefix = '> '

                                                    *'g:ctrlp_open_single_match'*
List of CtrlP modes for which CtrlP should accept an entry directly, if only
one candidate exists.
Example: >
  let g:ctrlp_open_single_match = ['buffer tags', 'buffer']
<
This is currently only really useful together with |g:ctrlp_default_input|
set before launching, and cleared afterwards, with a function such as
following: >
  fu! <SID>tagsUnderCursor()
    try
      let default_input_save = get(g:, 'ctrlp_default_input', '')
      let g:ctrlp_default_input = expand('<cword>')
      CtrlPBufTagAll
    finally
      if exists('default_input_save')
        let g:ctrlp_default_input = default_input_save
      endif
    endtry
  endfu


----------------------------------------
MRU mode options:~

                                                           *'g:ctrlp_mruf_max'*
Specify the number of recently opened files you want CtrlP to remember: >
  let g:ctrlp_mruf_max = 250

<
                                                       *'g:ctrlp_mruf_exclude'*
Files you don't want CtrlP to remember. Use regexp to specify the patterns: >
  let g:ctrlp_mruf_exclude = ''
<
Examples: >
  let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*' " MacOSX/Linux
  let g:ctrlp_mruf_exclude = '^C:\\dev\\tmp\\.*' " Windows

                                                       *'g:ctrlp_mruf_include'*
And if you want CtrlP to only remember some files, specify them here: >
  let g:ctrlp_mruf_include = ''
<
Example: >
  let g:ctrlp_mruf_include = '\.py$\|\.rb$'

                                                 *'g:ctrlp_tilde_homedir'*
Set this to 1 to save every MRU file path $HOME/$filepath in the $HOME dir
  as ~/$filepath instead of $HOME/$filepath : >
  let g:ctrlp_tilde_homedir = 0
<
Note: This applies also to all dir paths stored by :CtrlPBookmarkDirAdd!

                                                      *'g:ctrlp_mruf_relative'*
Set this to 1 to show only MRU files in the current working directory: >
  let g:ctrlp_mruf_relative = 0
<
Note: you can use a custom mapping to toggle this option inside the prompt: >
  let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F2>'] }
<
                                                 *'g:ctrlp_mruf_default_order'*
Set this to 1 to disable sorting when searching in MRU mode: >
  let g:ctrlp_mruf_default_order = 0

                                                *'g:ctrlp_mruf_case_sensitive'*
Match this with your file system case-sensitivity setting to avoid duplicate
MRU entries: >
  let g:ctrlp_mruf_case_sensitive = 1

                                                *'g:ctrlp_mruf_save_on_update'*
Set this to 0 to disable saving of the MRU list to hard drive whenever a new
entry is added, saving will then only occur when exiting Vim: >
  let g:ctrlp_mruf_save_on_update = 1
<
                                                *'g:ctrlp_bufname_mod'*
Modify file name section according to modificator string. See |filename-modifiers|. >
  let g:ctrlp_bufname_mod = ':t'
<
                                                *'g:ctrlp_bufpath_mod'*
Modify file path section according to modificator string. See |filename-modifiers|. >
  let g:ctrlp_bufpath_mod = ':~:.:h'
<
----------------------------------------
Advanced options:~

                                                          *'g:ctrlp_open_func'*
Define a custom function to open the selected file: >
  let g:ctrlp_open_func = {}

                                                         *'g:ctrlp_match_func'*
Set an external fuzzy matching function for CtrlP to use: >
  let g:ctrlp_match_func = {}
<
                                                       *'g:ctrlp_brief_prompt'*
When this is set to 1, the <bs> on empty prompt exit CtrlP.

===============================================================================
COMMANDS                                                       *ctrlp-commands*

                                                                       *:CtrlP*
:CtrlP [starting-directory]
   Open CtrlP in find file mode.

   If no argument is given, the value of |g:ctrlp_working_path_mode| will be
   used to determine the starting directory.  See |:CtrlPCurFile| and
   |:CtrlPCurWD| to temporarily override the setting.

   You can use <tab> to auto-complete the [starting-directory] when typing it.


                                                                 *:CtrlPBuffer*
:CtrlPBuffer
   Open CtrlP in find buffer mode.

                                                                *:CtrlPCurFile*
:CtrlPCurFile
    This acts like |:CtrlP| with |g:ctrlp_working_path_mode| = 'c' and ignores
    the variable's current value.
                                                             *:CtrlPClearCache*
:CtrlPClearCache
   Flush the cache for the current working directory. The same as pressing <F5>
   inside CtrlP.
   To enable or disable caching, use the |g:ctrlp_use_caching| option.

                                                         *:CtrlPClearAllCaches*
:CtrlPClearAllCaches
   Delete all the cache files saved in |g:ctrlp_cache_dir| location.

===============================================================================
MAPPINGS                                                       *ctrlp-mappings*

                                                                *'ctrlp-<c-p>'*
<c-p>
   Default |Normal| mode mapping to open the CtrlP prompt in find file mode.
