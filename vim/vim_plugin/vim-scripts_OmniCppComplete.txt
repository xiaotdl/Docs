  vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:
===============================================================================

OmniCppComplete version 0.41
============================

1. Overview                                     |omnicpp-overview|
2. Downloads                                    |omnicpp-download|
3. Installation                                 |omnicpp-installation|
4. Options                                      |omnicpp-options|
5. Features                                     |omnicpp-features|
6. Limitations                                  |omnicpp-limitations|
7. FAQ & TIPS                                   |omnicpp-faq|
8. History                                      |omnicpp-history|
9. Thanks                                       |omnicpp-thanks|

==============================================================================
1. Overview~
                                                *omnicpp-overview*
The purpose of this script is to provide an 'omnifunc' function for C and C++
language. In a C++ file, while in insert mode, you can use CTRL-X CTRL-O to:

        * Complete namespaces, classes, structs and unions
        * Complete attribute members and return type of functions
        * Complete the "this" pointer
        * Complete an object after a cast (C and C++ cast)
        * Complete typedefs and anonymous types

You can set a "may complete" behaviour to start a completion automatically
after a '.', '->' or '::'. Please see |omnicpp-may-complete| for more details.

The script needs an |Exuberant_ctags| database to work properly.

==============================================================================
2. Downloads~
                                                *omnicpp-download*
You can download the latest release of the script from this url :

        http://www.vim.org/scripts/script.php?script_id=1520

You can download |Exuberant_ctags| from :

        http://ctags.sourceforge.net

==============================================================================
3. Installation~
                                                *omnicpp-installation*
3.1. Script installation~
...

3.2. Building the Exuberant Ctags database~

To extract C/C++ symbols information, the script needs an |Exuberant_ctags|
database.

You have to build your database with at least the following options:
        --c++-kinds=+p  : Adds prototypes in the database for C/C++ files.
        --fields=+iaS   : Adds inheritance (i), access (a) and function 
                          signatures (S) information.
        --extra=+q      : Adds context to the tag name. Note: Without this
                          option, the script cannot get class members.

Thus to build recursively a ctags database from the current directory, the
command looks like this:
>
        ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
<
You can add a map in your |.vimrc| file, eg: >

        map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

3.3. Setting the 'tags' option~

The default value of the option 'tags' is "./tags,tags" ("./tags,./TAGS,tags,TAGS"
when |+emacs_tags| is enabled), if you build your tag database with the cmd above,
you normally don't have to change this setting (The cmd used above generates a 
file with the name "tags"). In this case your current working directory must be 
the directory where the tags file reside.

If your tags file is not named "tags" you have to add it in the 'tags'
option eg: >

        set tags+=/usr/tagsdir/mytagfile       
<
You can ensure that the 'tags' option is set properly by executing the following
command: >

        :tselect MyClass
<
Where MyClass is a class of your project. This command should display all 
possible tags for the type MyClass.

==============================================================================
4. Options~
                                                *omnicpp-options*

You can change completion behaviour by setting script options in your |.vimrc|
configuration file.

4.1. Global scope search toggle~
                                        *OmniCpp_GlobalScopeSearch*

You can enable/disable the global scope search by setting the
OmniCpp_GlobalScopeSearch option.

Possible values are : 
        0 = disabled
        1 = enabled
        [default=1] >

        let OmniCpp_GlobalScopeSearch = 1
<        
4.2. Namespace search method~
                                        *OmniCpp_NamespaceSearch*

You can change the 'using namespace' search behaviour by setting the
OmniCpp_NamespaceSearch option.

Possible values are :
        0 = namespaces disabled
        1 = search namespaces in the current buffer
        2 = search namespaces in the current buffer and in included files
        [default=1] >
        
        let OmniCpp_NamespaceSearch = 1
<
When OmniCpp_NamespaceSearch is 2, "using namespace" declarations are parsed
in the current buffer and also in included files. To find included files, the
script use the vim env 'path', so you have to set it properly.

Note: included files are searched with lvimgrep, thus the location list of the
current window is changed.

Note: When the 'filetype' is "c", namespace search is always disabled even if
OmniCpp_NamespaceSearch != 0

4.3. Class scope completion mode~
                                        *OmniCpp_DisplayMode*

When you are completing a class scope (eg: MyClass::<C-X><C-O>), depending on
the current scope, you may see sometimes static, public, protected or private
members and sometimes you may see all members. By default the choice is done 
automatically by the script but you can override it with the 
OmniCpp_DisplayMode option.

Note: This option can be use when you have friend classes in your project (the 
script does not support friend classes).

Possible values are :
        0 = auto
        1 = always show all members
        [default=0] >

        let OmniCpp_DisplayMode = 0

4.4. Show scope in abbreviation~
                                        *OmniCpp_ShowScopeInAbbr*

By default, in the |omnicpp-popup| menu, you will see the scope of a match in 
the last column. You can remove this column and add the scope at the beginning
of match abbreviation.
eg: 

OmniCpp_ShowScopeInAbbr = 0
        +-------------------------------------+
        |method1(   f  +  MyNamespace::MyClass|
        |_member1   m  +  MyNamespace::MyClass|
        |_member2   m  #  MyNamespace::MyClass|
        |_member3   m  -  MyNamespace::MyClass|
        +-------------------------------------+

OmniCpp_ShowScopeInAbbr = 1
        +-------------------------------------+
        |MyNamespace::MyClass::method1(   f + |
        |MyNamespace::MyClass::_member1   m + |
        |MyNamespace::MyClass::_member2   m # |
        |MyNamespace::MyClass::_member3   m - |
        +-------------------------------------+

Possible values are :
        0 = don't show scope in abbreviation
        1 = show scope in abbreviation and remove the last column
        [default=0] >

        let OmniCpp_ShowScopeInAbbr = 0
<
4.5. Show prototype in abbreviation~
                                        *OmniCpp_ShowPrototypeInAbbr*

This option allows to display the prototype of a function in the abbreviation
part of the popup menu.

Possible values are:
        0 = don't display prototype in abbreviation
        1 = display prototype in abbreviation
        [default=0] >
        
        let OmniCpp_ShowPrototypeInAbbr = 0
<
4.6. Show access~
                                        *OmniCpp_ShowAccess*

This option allows to show/hide the access information ('+', '#', '-') in the 
popup menu.

Possible values are:
        0 = hide access
        1 = show access
        [default=1] >
        
        let OmniCpp_ShowAccess = 1

4.7. Default using namespace list~
                                        *OmniCpp_DefaultNamespaces*

When |OmniCpp_NamespaceSearch| is not 0, the script will parse using namespace
declarations in the current buffer and maybe in included files.
You can specify manually a default namespace list if you want with the
OmniCpp_DefaultNamespaces option. Each item in the list is a namespace name.
eg: If you have

        let OmniCpp_DefaultNamespaces = ["std", "MyNamespace"]

    It will be the same as inserting this declarations at the top of the
    current buffer :

        using namespace std;
        using namespace MyNamespace;

This option can be use if you don't want to parse using namespace declarations
in included files and want to add namespaces that are always used in your
project.

Possible values are : 
        List of String
        [default=[]] >

        let OmniCpp_DefaultNamespaces = []

4.8.    May complete behaviour~
                                        *omnicpp-may-complete*

This feature allows you to run automatically a completion after a '.', '->' 
or '::'. By default, the "may complete" feature is set automatically for '.' 
and '->'. The reason to not set this feature for the scope operator '::' is 
sometimes you don't want to complete a namespace that contains many members.

To enable/disable the "may complete" behaviour for dot, arrow and scope
operator, you can change the option OmniCpp_MayCompleteDot,
OmniCpp_MayCompleteArrow and OmniCpp_MayCompleteScope respectively.

                                        *OmniCpp_MayCompleteDot*
Possible values are :
        0 = May complete disabled for dot
        1 = May complete enabled for dot
        [default=1] >

        let OmniCpp_MayCompleteDot = 1
<
                                        *OmniCpp_MayCompleteArrow*
Possible values are :
        0 = May complete disabled for arrow
        1 = May complete enabled for arrow
        [default=1] >

        let OmniCpp_MayCompleteArrow = 1
<
                                        *OmniCpp_MayCompleteScope*
Possible values are :
        0 = May complete disabled for scope
        1 = May complete enabled for scope
        [default=0] >

        let OmniCpp_MayCompleteScope = 0
<

Note: You can obviously continue to use <C-X><C-O>

4.9. Select/Don't select first popup item~
                                        *OmniCpp_SelectFirstItem*

Note: This option is only used when 'completeopt' does not contain "longest".

When 'completeopt' does not contain "longest", Vim automatically select the
first entry of the popup menu. You can change this behaviour with the
OmniCpp_SelectFirstItem option.

Possible values are:
        0 = don't select first popup item
        1 = select first popup item (inserting it to the text)
        2 = select first popup item (without inserting it to the text)
        [default=0] >
        
        let OmniCpp_SelectFirstItem = 0

4.10 Use local search function for variable definitions~
                                        *OmniCpp_LocalSearchDecl*

The internal search function for variable definitions of vim requires that the
enclosing braces of the function are located in the first column. You can
change this behaviour with the OmniCpp_LocalSearchDecl option. The local
version works irrespective the position of braces.

Possible values are:
        0 = use standard vim search function
        1 = use local search function
        [default=0] >
